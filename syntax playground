interface Foundation {
  const<A,B> : A -> B -> A;
  id<A> : A -> A;

  id x = x;
  const x _ = x;
};

Foundation Builtin;

use Builtin.{const, id};

type Option<A> {
  Some : A -> Option<A>;
  None : Option<A>;
};

interface Indexed<T> {
  at : WholeNumber -> T;
};

interface Sized {
  size : WholeNumber
};

type Array t {
  native Array : WholeNumber -> t -> Array t;
  native Empty : Array t;
};

Array<T> implements Indexed<T> {
  native at;
};

Array<_> implements Sized {
  native size;
};

Option<A> implements Indexed<A> {
  Some(a).at 0 = a;
  _.at _ = error "index out of bounds";
}

interface Functor<A> T {
  map<B> : (A -> B) -> T<B>;
  fill<B> : B -> T<B>;

  fill a = map (const a);
};

Option<A> implements Functor<A> {
  Some(x).map f  = Some(f x);
  None.map _ = None;
};

interface Applicative<A> T {
  T<A> implements Functor<A>;

  static pure : A -> T<A>
};

Option<A> implements Applicative<A> {
  pure = Some; // implicit polymorphism OK?
}

interface Monad<A> T {
  T<A> implements Applicative<A>;

  bind<B> : (A -> T<B>) -> T<B>;
  T<T<A>>.join : T<A>;

  bind f = map(f).join;
  join = bind id;

};


Option<A> implements Monad<A> {
  (Some x).bind f = f x;
  None.bind _ = None;
};

interface Sequence<A> T {
  forEach : (A -> Void) -> Void;
};

native Array<A> implements Sequence<A>;

interface FromBuffer<A> T {
  static fromBuffer : Buffer<A> -> T;
}

native Array<A> implements FromBuffer<A>;

Array<A> implements Functor<A> {
  array.map f = {
    buffer = Buffer<A>; // mutable structure, can we make it safe?
    array.forEach buffer.append;
    return Array.fromBuffer buffer;
  };
};

Array<A> implements Applicative<A> {
  pure = Array 1;
};

Array<A> implements Monad<A> {
  nested.join = {
    buffer = Buffer<A>;
    nested.forEach :array -> array.forEach buffer.append; // precedence?
  };
};

native type CodePoint;

interface Text T {
  T implements Sequence<CodePoint>;
  T implements Indexed<CodePoint>;
  T implements Sized;
};

native type AsciiText;
native AsciiText implements Text;

native type LatinText;
native LatinText implements Text;

type LocalPart {
  LocalPart : LatinText -> LocalPart;

  LocalPart text = {
    // ... validate the text
    return True;  // one possible thing, maybe the validator returns boolean? or should it just error?
  };

};

type DomainPart {
  DomainPart : AsciiText -> DomainPart;

  DomainPart text = {
    // ... validate the text
    error "domain part cannot exceed 256 characters"; // one possible thing, error
  };
};


interface LocalPart T {
  T implements Text;
};
interface DomainPart T {
  T implements Text;
};

LatinText implements LocalPart {
  // ... perform validations
};
AsciiText implements DomainPart;
